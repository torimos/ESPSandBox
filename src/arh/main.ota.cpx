#include <WiFi.h>
#include <ESPmDNS.h>
#include <WiFiUdp.h>
#include <ArduinoOTA.h>
#include <WiFiMulti.h>
#include <WiFiClient.h>

WiFiMulti WiFiMulti;
WiFiServer server(80);

const char* host = "esp32otaupdate";
const char* ssid = "zzi-net";
const char* password = "smarthomeiot2018";

#define STATUS_LED 2

unsigned long tick = 0;

void toggleStatusLed(int count, int timeDelay)
{
    count = count;
    while(count-- > 0)
    {
        digitalWrite(STATUS_LED, HIGH);
        delay(timeDelay);
        digitalWrite(STATUS_LED, LOW);
        delay(timeDelay);
    }
}

void reboot(String reason)
{
    Serial.println();
    Serial.println("" + reason + " Rebooting in 3 sec");
    toggleStatusLed(3, 500);
    ESP.restart();
}

void setup() {
    pinMode(STATUS_LED, OUTPUT);
    digitalWrite(STATUS_LED, LOW);
    Serial.begin(115200);
    Serial.println("Test v1.0.8");
    Serial.println("Booting...");
  
    toggleStatusLed(1, 200);
    WiFi.begin();
    // Serial.printf("WiFi module MAC address: %s\n\r", WiFi.macAddress().c_str());

     // Connect to WiFi network
    WiFi.begin(ssid, password);
    // Wait for connection
    while (WiFi.status() != WL_CONNECTED) {
        delay(500);
        Serial.print(".");
    }

    //Port defaults to 3232
    //ArduinoOTA.setPort(3232);
    ArduinoOTA.setPort(8266);

    //Hostname defaults to esp3232-[MAC]
    //ArduinoOTA.setHostname("myesp32");

    // No authentication by default
    // ArduinoOTA.setPassword("admin");

    // Password can be set with it's md5 value as well
    // MD5(admin) = 21232f297a57a5a743894a0e4a801fc3
    // ArduinoOTA.setPasswordHash("21232f297a57a5a743894a0e4a801fc3");

    ArduinoOTA.onStart([]() {
        String type;
        if (ArduinoOTA.getCommand() == U_FLASH)
        type = "sketch";
        else // U_SPIFFS
        type = "filesystem";

        // NOTE: if updating SPIFFS this would be the place to unmount SPIFFS using SPIFFS.end()
        Serial.println("Start updating " + type);
    });
    ArduinoOTA.onEnd([]() {
        Serial.println("\nEnd");
    });
    ArduinoOTA.onProgress([](unsigned int progress, unsigned int total) {
        Serial.printf("Progress: %u%%\r", (progress / (total / 100)));
    });
    ArduinoOTA.onError([](ota_error_t error) {
        Serial.printf("Error[%u]: ", error);
        if (error == OTA_AUTH_ERROR) Serial.println("Auth Failed");
        else if (error == OTA_BEGIN_ERROR) Serial.println("Begin Failed");
        else if (error == OTA_CONNECT_ERROR) Serial.println("Connect Failed");
        else if (error == OTA_RECEIVE_ERROR) Serial.println("Receive Failed");
        else if (error == OTA_END_ERROR) Serial.println("End Failed");

        reboot("OTA Update failed!");
    });

    ArduinoOTA.begin();

    Serial.println();
    Serial.println("Ready");
    Serial.printf("IP address: %s\n\r", WiFi.localIP().toString().c_str());
    Serial.printf("GW IP address: %s\n\r", WiFi.gatewayIP().toString().c_str());
    Serial.printf("Soft IP address:  %s\n\r", WiFi.softAPIP().toString().c_str());
    Serial.println();

    // Set up mDNS responder:
    // - first argument is the domain name, in this example
    //   the fully-qualified domain name is "esp8266.local"
    // - second argument is the IP address to advertise
    //   we send our IP address on the WiFi network
    if (!MDNS.begin(host)) {
        reboot("Error setting up MDNS responder!");
    }
    Serial.println();
    Serial.println("mDNS responder started");
    
    // Start TCP (HTTP) server
    server.begin();
    
    MDNS.addService("http", "tcp", 80);

    Serial.println("Web server started");

    toggleStatusLed(2, 100);
    tick = millis() + 1000;
}
int idx = 0;
void loop() {
    ArduinoOTA.handle();

    if (tick <= millis())
    {
        Serial.printf("[%ld] Ping\n\r", millis());
        //if (!ping()) reboot("Failed to ping");
        toggleStatusLed(3, 50);
        tick = millis() + 5000;
    }

    WiFiClient client = server.available();
    if (!client) {
        return;
    }
    Serial.println("");
    Serial.println("New client");

    auto timeOut = millis() + 15000;
    // while(WiFi.status() != WL_CONNECTED ) {
    // Wait for data from client to become available
    while ((client.connected() && !client.available() && (millis() < timeOut))){
        ArduinoOTA.handle();
    }

    // Read the first line of HTTP request
    String req = client.readStringUntil('\r');

    // First line of HTTP request looks like "GET /path HTTP/1.1"
    // Retrieve the "/path" part by finding the spaces
    int addr_start = req.indexOf(' ');
    int addr_end = req.indexOf(' ', addr_start + 1);
    if (addr_start == -1 || addr_end == -1) {
        Serial.print("Invalid request: ");
        Serial.println(req);
        return;
    }
    req = req.substring(addr_start + 1, addr_end);
    Serial.print("Request: ");
    Serial.println(req);
    client.flush();

    String s;
    if (req == "/")
    {
        IPAddress ip = WiFi.localIP();
        String ipStr = String(ip[0]) + '.' + String(ip[1]) + '.' + String(ip[2]) + '.' + String(ip[3]);
        s = "HTTP/1.1 200 OK\r\nContent-Type: text/html\r\n\r\n<!DOCTYPE HTML>\r\n<html>Hello from ESP32 at ";
        s += ipStr;
        s += "<br/>IP address: " + WiFi.localIP().toString();
        s += "<br/>GW IP address: " + WiFi.gatewayIP().toString();
        s += "<br/>Soft IP address: " + WiFi.softAPIP().toString();
        s += "<br/>Counter: " + String(idx++);
        s += "<br/>Time: " + String(millis()/1000);
        s += "</html>\r\n\r\n";
        Serial.println("Sending 200");
    }
    else
    {
        s = "HTTP/1.1 404 Not Found\r\n\r\n";
        Serial.println("Sending 404");
    }
    client.print(s);

    Serial.println("Done with client");
}