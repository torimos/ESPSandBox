
    // how bright the LED is
int fadeAmount = 5;    // how many points to fade the LED by
long timeout = 0;
#include <Arduino.h>

// #include <WiFiClient.h>
// #include <HTTPClient.h>
// #include <FS.h>

void onMqttConnect(bool sessionPresent) {
  Serial.println("Connected to MQTT.");
  Serial.print("Session present: ");
  Serial.println(sessionPresent);
  uint16_t packetIdSub = mqttClient.subscribe("test/lol", 2);
  Serial.print("Subscribing at QoS 2, packetId: ");
  Serial.println(packetIdSub);
  mqttClient.publish("test/lol", 0, true, "test 1");
  Serial.println("Publishing at QoS 0");
  uint16_t packetIdPub1 = mqttClient.publish("test/lol", 1, true, "test 2");
  Serial.print("Publishing at QoS 1, packetId: ");
  Serial.println(packetIdPub1);
  uint16_t packetIdPub2 = mqttClient.publish("test/lol", 2, true, "test 3");
  Serial.print("Publishing at QoS 2, packetId: ");
  Serial.println(packetIdPub2);
}

void onMqttDisconnect(AsyncMqttClientDisconnectReason reason) {
  Serial.println("Disconnected from MQTT.");
}

void onMqttSubscribe(uint16_t packetId, uint8_t qos) {
  Serial.println("Subscribe acknowledged.");
  Serial.print("  packetId: ");
  Serial.println(packetId);
  Serial.print("  qos: ");
  Serial.println(qos);
}

void onMqttUnsubscribe(uint16_t packetId) {
  Serial.println("Unsubscribe acknowledged.");
  Serial.print("  packetId: ");
  Serial.println(packetId);
}

void onMqttMessage(char* topic, char* payload, AsyncMqttClientMessageProperties properties, size_t len, size_t index, size_t total) {
  Serial.println("Publish received.");
  Serial.print("  topic: ");
  Serial.println(topic);
  Serial.print("  qos: ");
  Serial.println(properties.qos);
  Serial.print("  dup: ");
  Serial.println(properties.dup);
  Serial.print("  retain: ");
  Serial.println(properties.retain);
  Serial.print("  len: ");
  Serial.println(len);
  Serial.print("  index: ");
  Serial.println(index);
  Serial.print("  total: ");
  Serial.println(total);
}

void onMqttPublish(uint16_t packetId) {
  Serial.println("Publish acknowledged.");
  Serial.print("  packetId: ");
  Serial.println(packetId);
}
void loop1(void){

  // set the brightness on LEDC channel 0
  ledcAnalogWrite(LEDC_CHANNEL_0, brightness);

  if (millis() > timeout)
  {
    if (WiFi.status() == WL_CONNECTED) {
      HTTPClient http;
      String payload;
      StaticJsonBuffer<256> jsonBuffer;
      
      http.begin("http://192.168.0.199:1880/events");
      http.addHeader("Content-Type", "application/json");
      
      JsonObject &root = jsonBuffer.createObject();
      root["type"] = 1;
      root["value"] = hallRead();
      root.prettyPrintTo(payload);

      //Serial.printf("Posting event to server, payload: %s", payload.c_str());
      int httpCode = http.POST(payload);
      //String response = http.getString();
      http.end();
      if (httpCode != 200) {
        Serial.printf("Status Code: %d. Respone: %s\n\r",httpCode, "...");
      }
    }
    timeout = millis() + 1000;
  }

  delay(20);
}